name: Pull Request Workflow

# global environment variables to all jobs
env:
  REGION: us-west-2
  SOLUTION_NAME: aws-virtual-waiting-room
  DIST_OUTPUT_BUCKET: swr

on: 
  pull_request:
    types: [opened, edited, reopened, synchronize]

jobs:
  clamav-scan-job:
    runs-on: ubuntu-latest
    name: Check source code with ClamAV Scan
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for any malware in the commit
      - name: ClamAV Scan
        uses: djdefi/gitavscan@main
        with:
          full: "--full"

  trufflehog-scan-job:
    runs-on: ubuntu-latest
    name: Check source code with Trufflehog Scan
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: "--regex --entropy=False"
  
  bandit-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Bandit
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install bandit
        run: pip install bandit
      - name: Check source with bandit
        run: bandit -r source

  pylint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Pylint
    steps:
      # check out repo
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Pylint
      - name: Check with Pylint
        run: |
          pip install pylint
          cd source
          ./tools/pylint.sh

  jshint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with JShint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JShint
        run: npm install jshint
      - name: Check with JShint
        run: |
          cd source
          find . -name '*.js' -type f -print | \
          xargs ../node_modules/jshint/bin/jshint

  build-job:
    runs-on: ubuntu-latest
    # use a specific environment for this build that has secrets defined and protection rules in place, if needed
    needs:
      [
        clamav-scan-job,
        trufflehog-scan-job,
        bandit-check-job,
        pylint-check-job,
        jshint-check-job
      ]
    environment: push_env
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up PR variables
        run: |
          PR_ID=$(echo $GITHUB_REF | awk 'BEGIN { FS = "/" } ; { print $3 }')
          echo "VERSION=PR$PR_ID" >> $GITHUB_ENV
          echo "AWS_DEFAULT_REGION=$REGION" >> $GITHUB_ENV
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Update packages
        run: |
          sudo apt-get update
          pip install -U pip
      - name: Run safety check before build
        run: |
          pip install safety
          safety check -r deployment/requirements.txt
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Run build script
        run: |
          cd deployment
          ./build-s3-dist.sh $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION
      - name: Run cfn-lint against templates
        run: |
          cd deployment/global-s3-assets
          cfn-lint *.template
      - name: Run cfn-nag against templates
        uses: stelligent/cfn_nag@master
        with:
          input_path: deployment/global-s3-assets
      - name: Zip up regional and global assets
        run: |
          cd deployment
          zip regional-s3-assets.zip regional-s3-assets/*
          zip global-s3-assets.zip global-s3-assets/*
      - name: Store zipped global and regional assets
        uses: actions/upload-artifact@v2
        with:
          name: zipped-regional-global-assets
          path: deployment/*.zip
