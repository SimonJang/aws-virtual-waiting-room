name: Push Workflow

# global environment variables to all jobs
env:
  REGION: us-west-2
  SOLUTION_ORG: aws-solutions
  SOLUTION_NAME: aws-virtual-waiting-room
  DIST_OUTPUT_BUCKET: swr
  REGIONS_TO_DEPLOY: "us-west-2 us-east-1"
  RELEASE_BRANCH: refs/heads/main

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"

jobs:
  # clamav-scan-job:
  #   runs-on: ubuntu-latest
  #   name: Check source code with ClamAV Scan
  #   steps:
  #     - name: Check out repo
  #       uses: actions/checkout@v2
  #     # scan for any malware in the commit
  #     - name: ClamAV Scan
  #       uses: djdefi/gitavscan@main
  #       with:
  #         full: "--full"

  trufflehog-scan-job:
    runs-on: ubuntu-latest
    name: Check source code with Trufflehog Scan
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: "--regex --entropy=False"
  
  bandit-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Bandit
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install bandit
        run: pip install bandit
      - name: Check source with bandit
        run: bandit -r source

  pylint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Pylint
    steps:
      # check out repo
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Pylint
      - name: Check with Pylint
        run: |
          pip install pylint
          cd source
          ./tools/pylint.sh

  pa11y-check-job:
    runs-on: ubuntu-latest
    name: Check HTML code with Pa11y for accessibility
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Pa11y
        run: npm install pa11y
      - name: Check with Pa11y
        run: |
          cd source
          find . -iname '*.html' -exec ../node_modules/pa11y/bin/pa11y.js {} \;

  jshint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with JShint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JShint
        run: npm install jshint
      - name: Check with JShint
        run: |
          cd source
          find . -name '*.js' -type f -print | \
          xargs ../node_modules/jshint/bin/jshint

  build-job:
    name: Run build script
    runs-on: ubuntu-latest
    needs:
      [
        #clamav-scan-job,
        trufflehog-scan-job,
        bandit-check-job,
        pylint-check-job,
        jshint-check-job
      ]
    # use a specific environment for this build that has secrets defined 
    # and protection rules in place, if needed
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Set up Push variables
        run: echo "VERSION=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Set up AWS environment 
        run: |
          export AWS_DEFAULT_REGION=${{ env.REGION }}
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
      - name: Update packages
        run: |
          sudo apt-get update
          pip install -U pip
      - name: Run safety check before build
        run: |
          pip install safety
          safety check -r deployment/requirements.txt
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Cache deployment directory
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run build script
        run: |
          cd deployment
          ./build-s3-dist.sh $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION
      - name: Run unit tests
        run: |
          cd deployment
          pip install pkg/aws_virtual_waiting_room_common-1.0.0-py3-none-any.whl
          ./run-unit-tests.sh
      
  cfn-lint-job:
    name: Run cfn-lint on templates
    runs-on: ubuntu-latest
    needs:
      [
        build-job
      ]
    steps:
      - name: Install cfn-lint
        run: pip install cfn-lint
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run cfn-lint against templates
        run: |
          cd deployment/global-s3-assets
          cfn-lint *.template
  
  cfn-nag-job:
    name: Run cfn-nag on templates
    runs-on: ubuntu-latest
    needs:
      [
        build-job
      ]
    steps:
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Run cfn-nag against templates
        uses: stelligent/cfn_nag@master
        with:
          input_path: deployment/global-s3-assets

  upload-and-store-job:
    name: Upload and store regional and global assets
    needs:
      [
        cfn-lint-job,
        cfn-nag-job        
      ]
    runs-on: ubuntu-latest
    environment: push_env
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - run: sleep 5 # per doc there is still some kind of race condition
      - name: Configure AWS
        run: |
          export AWS_ROLE_ARN=${{ secrets.VWR_ROLE_ARN }}
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=${{ env.REGION }}

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV
          echo "VERSION=`git rev-parse --short HEAD`" >> $GITHUB_ENV
          
          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Restore deployment directory from cache
        uses: actions/cache@v2
        id: cache-deployment
        with:
          path: deployment/
          key: ${{ github.sha }}
      - name: Upload to S3
        run: |
          cd deployment
          ./deploy.sh -b $DIST_OUTPUT_BUCKET -s $SOLUTION_NAME -v $VERSION -r "$REGIONS_TO_DEPLOY" -a none -t dev
      - name: Zip up regional and global assets
        run: |
          cd deployment
          zip regional-s3-assets.zip regional-s3-assets/*
          zip global-s3-assets.zip global-s3-assets/*
      - name: Store zipped global and regional assets
        uses: actions/upload-artifact@v2
        with:
          name: zipped-regional-global-assets
          path: deployment/*.zip  
  
  notify-end-workflow:
    name: Send a notification for end of workflow
    needs:
      [
        upload-and-store-job
      ]
    runs-on: ubuntu-latest
    steps:
      - run: |
          echo "Run ID:  ${{ github.run_id }}"
          curl -H "Accept: application/vnd.github.v3+json" https://api.github.com/repos/${{ env.SOLUTION_ORG }}/${{ env.SOLUTION_NAME }}/actions/runs/${{ github.run_id }}/artifacts
