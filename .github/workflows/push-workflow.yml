name: Push Workflow

# global environment variables to all jobs
env:
  REGION: us-west-2
  SOLUTION_NAME: aws-virtual-waiting-room
  DIST_OUTPUT_BUCKET: swr
  REGIONS_TO_DEPLOY: "us-west-2"
  RELEASE_BRANCH: refs/heads/main

on:
  push:
    paths-ignore:
      - "docs/**"
      - "**/*.md"

jobs:
  clamav-scan-job:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for any malware in the commit
      - name: ClamAV Scan
        uses: djdefi/gitavscan@main
        with:
          full: "--full"

  trufflehog-scan-job:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      # scan for various types of keys and tokens
      - name: Trufflehog Scan
        uses: edplato/trufflehog-actions-scan@master
        with:
          scanArguments: "--regex --entropy=False"
  
  bandit-check-job:
    runs-on: ubuntu-latest
    name: Check source code with bandit
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install bandit
        run: pip install bandit
      - name: Check source with bandit
        run: bandit -r source

  pylint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with Pylint
    steps:
      # check out repo
      - name: Checkout
        uses: actions/checkout@v2
      # check it with Pylint
      - name: Check with Pylint
        run: |
          cd source
          ./tools/pylint.sh

  jshint-check-job:
    runs-on: ubuntu-latest
    name: Check source code with JShint
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install JShint
        run: npm install jshint
      - name: Check with JShint
        run: |
          cd source
          find . -name '*.js' -type f -print | \
          xargs ../node_modules/jshint/bin/jshint

  build-job:
    runs-on: ubuntu-latest
    # use a specific environment for this build that has secrets defined and protection rules in place, if needed
    needs:
      [
        clamav-scan-job,
        trufflehog-scan-job,
        bandit-check-job,
        pylint-check-job,
        jshint-check-job
      ]
    environment: push_env
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Check out repo
        uses: actions/checkout@v2
      - name: Configure AWS
        run: |
          sleep 5
          export AWS_ROLE_ARN=${{ secrets.VWR_ROLE_ARN }}
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=${{ env.REGION }}

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Set up Push variables
        if: github.event_name == 'push'
        run: |
          echo "VERSION=`git rev-parse --short HEAD`" >> $GITHUB_ENV
      - name: Update system path
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Update packages
        run: |
          sudo apt-get update
          pip install -U pip
      - name: Run safety check before build
        run: safety check -r deployment/requirements.txt
      - name: Install required system packages
        run: |
          pip install --upgrade --force-reinstall -r deployment/requirements.txt 2> error.txt
          if [ -s error.txt ]; then
            echo "ERROR: System package installation failed."
            cat error.txt
            exit 1
          fi
      - name: Run build script
        run: |
          cd deployment
          ./build-s3-dist.sh $DIST_OUTPUT_BUCKET $SOLUTION_NAME $VERSION
      - name: Zip up regional and global assets
        run: |
          cd deployment
          zip regional-s3-assets.zip regional-s3-assets/*
          zip global-s3-assets.zip global-s3-assets/*
      - name: Store zipped global and regional assets
        uses: actions/upload-artifact@v2
        with:
          name: zipped-regional-global-assets
          path: deployment/*.zip
      - name: Store regional assets for deployment
        uses: actions/upload-artifact@v2
        with:
          name: regional-s3-assets
          path: deployment/regional-s3-assets/*
      - name: Store templates for check jobs and deployment
        uses: actions/upload-artifact@v2
        with:
          name: global-s3-assets
          path: deployment/global-s3-assets/*.template
      - name: Store virtual environment requirements
        uses: actions/upload-artifact@v2
        with:
          name: virtual-environment-requirements
          path: deployment/requirements.txt

  cfn-lint-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-lint
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: global-s3-assets
      - name: Check with cfn-lint
        run: cfn-lint *.template
  
  cfn-nag-check-job:
    needs: scan-build-upload-job
    runs-on: ubuntu-latest
    name: Check templates with cfn-nag
    steps:
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Check with cfn-nag
        uses: stelligent/cfn_nag@master

  deploy-job:
    needs: 
      [
        cfn-lint-check-job,
        cfn-nag-check-job
      ]
    runs-on: ubuntu-latest
    name: Deploy to S3
    environment: push_env
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Configure AWS
        run: |
          sleep 5
          export AWS_ROLE_ARN=${{ secrets.VWR_ROLE_ARN }}
          export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
          export AWS_DEFAULT_REGION=${{ env.REGION }}

          echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
          echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
          echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

          curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
      - name: Download build templates
        uses: actions/download-artifact@v2
        with:
          name: cloudformation-templates
      - name: Deploy to S3
        run: |
          cd deployment
          ./deploy.sh -b $DIST_OUTPUT_BUCKET -s $SOLUTION_NAME -v $VERSION -r "$REGIONS_TO_DEPLOY" -a none -t dev


  # main-branch-deploy-cfn:
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       cfn-lint-check-job,
  #       cfn-nag-check-job,
  #       hawkeye-check-job,
  #       pylint-check-job,
  #       jshint-check-job
  #     ]
  #   # use a specific environment for this build that has secrets defined and protection rules in place, if needed
  #   environment: test_install_env
  #   if: github.ref == ${{ env.RELEASE_BRANCH }}
  #   steps:
  #     - name: Configure AWS
  #       run: |
  #         sleep 5
  #         export AWS_ROLE_ARN=${{ secrets.SB_ROLE_ARN }}
  #         export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
  #         export AWS_DEFAULT_REGION=${{ env.REGION }}

  #         echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
  #         echo AWS_ROLE_ARN=$AWS_ROLE_ARN >> $GITHUB_ENV
  #         echo AWS_DEFAULT_REGION=$AWS_DEFAULT_REGION >> $GITHUB_ENV

  #         curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE
  #     - name: Generate version out of commit ID
  #       run: |
  #         echo "VERSION=${GITHUB_SHA::7}" >> $GITHUB_ENV
  #     - name: Create CloudFormation stack based on last job's build
  #       run: |
  #         TEMPLATE="https://$DIST_OUTPUT_BUCKET-us-west-2.s3-us-west-2.amazonaws.com/$SOLUTION_NAME/latest/$SOLUTION_NAME-release.template"
  #         echo $TEMPLATE
  #         response="$( aws cloudformation create-stack --stack-name MSAM-test-master-$VERSION --template-url $TEMPLATE --region $REGION --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND --disable-rollback )"
  #         echo $response
